name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - 'Formula/**'
      - '.github/**'
    tags-ignore:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      force_version:
        description: 'Force specific version (e.g. 1.2.3)'
        type: string
      dry_run:
        description: 'Dry run (no actual release)'
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  semantic-release:
    name: Semantic Release with Uplift
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.check.outputs.should-release == 'true' && inputs.dry_run != true }}
      new-release-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Uplift
        if: inputs.force_version == ''
        uses: gembaadvantage/uplift-action@v2
        with:
          install-only: true
          args: --version

      - name: Determine Next Version with Uplift
        id: version
        if: inputs.force_version == ''
        run: |
          # Run uplift and capture output
          output=$(uplift tag --dry-run --no-prefix --next 2>&1 || true)
          echo "$output"

          # Extract version from "identified next semantic version version=X.Y.Z" format
          version=$(echo "$output" | grep "identified next semantic version" | sed -n 's/.*version=\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p')

          if [ -n "$version" ]; then
            echo "Detected next version: $version"
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "No version detected from uplift output"
            echo "version=" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for New Release
        id: check
        run: |
          if [ -n "${{ inputs.force_version }}" ]; then
            echo "Manual version specified: ${{ inputs.force_version }}"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=${{ inputs.force_version }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.version.outputs.version }}" ]; then
            echo "New version determined: ${{ steps.version.outputs.version }}"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "No new version to release"
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag with Uplift
        id: uplift
        if: steps.check.outputs.should-release == 'true' && inputs.dry_run != true
        uses: gembaadvantage/uplift-action@v2
        with:
          args: tag --no-prefix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create git-cliff config
        if: steps.check.outputs.should-release == 'true' && inputs.dry_run != true
        run: |
          cat > cliff.toml << 'EOF'
          [changelog]
          body = """
          {% for group, commits in commits | group_by(attribute="group") %}
          ### {{ group | trim }}
          {% for commit in commits %}
          - {{ commit.message | upper_first }}\
          {% endfor %}
          {% endfor %}\n
          """
          trim = true

          [git]
          conventional_commits = true
          filter_unconventional = true
          commit_parsers = [
              { message = "^feat", group = "🚀 Features" },
              { message = "^fix", group = "🐛 Bug Fixes" },
              { message = "^doc", group = "📚 Documentation" },
              { message = "^perf", group = "⚡ Performance" },
              { message = "^refactor", group = "♻️ Refactor" },
              { message = "^style", group = "🎨 Styling" },
              { message = "^test", group = "🧪 Testing" },
              { message = "^chore", group = "🔧 Miscellaneous Tasks" },
              { message = "^ci", group = "🔧 Miscellaneous Tasks" },
              { body = ".*security", group = "🔒 Security" },
              { message = "^revert", group = "⏪ Revert" },
          ]
          filter_commits = false
          topo_order = false
          sort_commits = "oldest"
          EOF

      - name: Generate Release Notes with git-cliff
        id: changelog
        if: steps.check.outputs.should-release == 'true' && inputs.dry_run != true
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --verbose --latest

      - name: Create GitHub Release
        id: github-release
        if: steps.check.outputs.should-release == 'true' && inputs.dry_run != true
        run: |
          gh release create "${{ steps.check.outputs.version }}" \
            --title "v${{ steps.check.outputs.version }}" \
            --notes "${{ steps.changelog.outputs.content }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build binary and upload to release
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.semantic-release.outputs.new-release-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p dist
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="editorlint.exe"
          else
            BINARY_NAME="editorlint"
          fi

          go build -ldflags="-s -w" -o "dist/${BINARY_NAME}" cmd/editorlint/main.go

          # Create archive
          ARCHIVE_NAME="editorlint_v${VERSION}_${GOOS}_${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            # Install zip if not available
            sudo apt-get update && sudo apt-get install -y zip
            cd dist && zip "../${ARCHIVE_NAME}.zip" "${BINARY_NAME}" && cd ..
            ARCHIVE_FILE="${ARCHIVE_NAME}.zip"
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" -C dist "${BINARY_NAME}"
            ARCHIVE_FILE="${ARCHIVE_NAME}.tar.gz"
          fi

          # Generate checksum for this archive
          sha256sum "${ARCHIVE_FILE}" > "${ARCHIVE_FILE}.sha256"

          # Upload archive and checksum to release
          gh release upload "${VERSION}" "${ARCHIVE_FILE}" "${ARCHIVE_FILE}.sha256"

  update-homebrew:
    needs: [semantic-release, build]
    runs-on: ubuntu-latest
    if: needs.semantic-release.outputs.new-release-published == 'true'
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.DOBBOBOT_APP_ID }}
          private-key: ${{ secrets.DOBBOBOT_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ steps.app-token.outputs.token }}

      - name: Get release info
        id: release
        run: |
          VERSION=${{ needs.semantic-release.outputs.new-release-version }}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          # Download the source tarball to calculate SHA256
          curl -L -o source.tar.gz "https://github.com/cdobbyn/editorlint/archive/refs/tags/${VERSION}.tar.gz"
          SHA256=$(sha256sum source.tar.gz | cut -d' ' -f1)
          echo "SHA256=$SHA256" >> $GITHUB_OUTPUT

      - name: Update Homebrew formula
        run: |
          # Check if Formula directory and file exist
          if [ ! -f "Formula/editorlint.rb" ]; then
            echo "Formula/editorlint.rb not found, skipping Homebrew update"
            exit 0
          fi

          sed -i "s|url \".*\"|url \"https://github.com/cdobbyn/editorlint/archive/refs/tags/${{ steps.release.outputs.VERSION }}.tar.gz\"|" Formula/editorlint.rb
          sed -i "s|sha256 \".*\"|sha256 \"${{ steps.release.outputs.SHA256 }}\"|" Formula/editorlint.rb
          sed -i "s|version \".*\"|version \"${{ steps.release.outputs.VERSION }}\"|" Formula/editorlint.rb

      - name: Commit updated formula
        run: |
          if git diff --quiet Formula/editorlint.rb; then
            echo "No changes to formula file"
            exit 0
          fi

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Formula/editorlint.rb
          git commit -m "chore: update Homebrew formula to ${{ steps.release.outputs.VERSION }}"
          git push
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
